 <div class="center jumbotron">
  
  <h1>Odin-Facebook by Jamesredux</h1>
  
  <h2>Please log in to see features</h2>

  <div class="container">
  	<div class="row">
  		<aside class="col-md-4">
  			<%= link_to "Create Account", new_user_registration_path, class: "btn btn-lg btn-primary" %>
  		</aside>
  		<aside class="col-md-4">
  			<%= link_to "Sign in", new_user_session_path, class: "btn btn-lg btn-primary" %>
  		</aside>
  		<aside class="col-md-4">
  			<%= link_to "Sign in with Facebook", user_facebook_omniauth_authorize_path, class: "btn btn-lg btn-primary" %>
  		</aside>
  	</div>
  </div> 
  
  </div>

  <div class="readme_james">
  	<h2>Ruby on Rails <a href="https://www.theodinproject.com/courses/ruby-on-rails/lessons/final-project">Final Project</a> as part of the Odin Project</h2>


  	




<p>
Assignment: Build Facebook!  You'll build a large portion of the core Facebook user functionality in this project.  We won't be worrying about the Javascript-heavy front end stuff but you won't need it to get a nice user experience.

You should write at least a basic set of integration tests which let you know if each page is loading properly and unit tests to make sure your associations have been properly set up (e.g. testing that `User.first.posts` works properly).</p>


<h2>The criteria set by the project were...</h2>



<p><b>1. Use Postgresql for your database from the beginning (not sqlite3), that way your deployment to Heroku will go much more smoothly:</b>
</p>
<p>Done this, also created the app in Rails 6 to give me experience of working with that release.</p>
<p><b>2. Users must sign in to see anything except the sign in page.</b></p>
<p>Here we are! Anyone can create an account above but email confirmation is active.</p>
<p><b>3. User sign-in should use the Devise gem.</b></p>
<p>Used the devise gem, added some further authentifications - created some difficulties with facebook login below</p>
<p><b>4. Users can send Friend Requests to other Users.</b></p>
<p><%= image_tag "friendreq.gif", class: "img-responsive" %></p>
<p><b>5. A User must accept the Friend Request to become friends.</b></p>
<p><%= image_tag "acceptreq.gif", class: "img-responsive" %></p>
<p>Users can also decline requests</p>

<p><b>6. The Friend Request shows up in the notifications section of a User's navbar.</b></p>
<p><%= image_tag "requestcount.png", class: "img-responsive" %></p>
<p><b>7. Users can create Posts (text only to start). 8. Users can Like Posts. 9. Users can Comment on Posts. 10. Posts should always display with the post content, author, comments and likes.</b> </p>

<p><%= image_tag "completepost.png", class: "img-responsive" %></p>
<p>This was completed, like/unlike button done with ajax. List of likers added with links to their accounts</p>

<p><%= image_tag "like.gif", class: "img-responsive" %></p>



<p><b>11. Treat the Posts Index page like the real Facebook's "Timeline" feature -- show all the recent posts from the current user and users she is friends with.</b></p>
<p>Done, mixture of users posts and all his/her friends posts mixed together. Most recent at the top.</p>
<p><b>12. Users can create a Profile with a Photo (just start by using the Gravatar image like you did in the Rails Tutorial).</b></p>
<p>Users can use Gravatar or upload their own pictures.</p>
<p><b>13. The User Show page contains their Profile information, photo, and Posts.
14. The Users Index page lists all users and buttons for sending Friend Requests to those who are not already friends or who don't already have a pending request.</b></p>
<p> <%= image_tag "userslist.png", class: "img-responsive" %> </p>
<p><b>15. Sign in should use Omniauth to allow a user to sign in with their real Facebook account.</b></p>
<p> This  was  pretty tricky but I think I have  got it working - facebook has changed some of the settings regarding this.</p>
<p> <%= image_tag "facebooklogin.png", class: "img-responsive" %> </p>
<p><b>16. Set up a mailer to send a welcome email when a new user signs up.</b></p>
<p> Set up mailer and integrated Devise so user has to confirm email, and confirm change of password by email</p>

<p><b>17. Deploy your App to Heroku.</b></p>
<p>Here we are!</p>
<p><b>18. Set up the SendGrid add-on and start sending real emails. It's free for low usage tiers.</b></p>
<p>Done - Real emails are sent in production.</p>

<h3> Extra Credit</h3>

<p><b>1. Make posts also allow images (either just via a URL or, more complicated, by uploading one). 2. Use the Active Storage to allow users to upload a photo to their profile.</b></p>
<p>Users can do this. Upload photos with their post or for their profile picture. There are size limits, it uses Active Storage</p>

<p><b>3. Make your post able to be either a text OR a photo by using a polymorphic association (so users can still like or comment on it while being none-the-wiser).</b></p>
<p>I did this by making posts and pictures separate models so that likes and comments would have polymorphic associations with them. I think I made this  more complicated then it needed to be. </p>
<p><b>4. Style it up nicely! We'll dive into HTML/CSS in the next course.</b></p>
<p>I styled it up a bit</p>

<p><b>Some of the gems used, see gemfile for full details</b></p>

<ul>


<li>gem 'omniauth-facebook' - For facebook login</li>
<li>gem 'bcrypt', '3.1.12' - For hashing passwords</li>
<li>gem 'faker', '2.1.2' - to create dummy users and posts</li>
<li>gem 'kaminari' - to paginate records</li>
<li>gem 'aws-sdk-s3', '1.46.0' - for Amazon web storage</li>
<li>gem 'image_processing', '1.9.3' - for processing and manipulating image uploads</li>
<li>gem 'mini_magick',       '4.9.5' - as above transforms images</li>
<li>gem 'active_storage_validations', '0.8.2'- for validating active storage uploads</li>
<li>gem 'figaro', '~> 1.0.0' - for storing api keys securely</li>
<li>gem 'letter_opener' - for dealings with mailer in development</li>
<li>gem 'guard' - for testing </li>
</ul>

</div>



  </div>